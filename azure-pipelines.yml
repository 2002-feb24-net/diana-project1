# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# This file defines a set of jobs that will run when triggered on a cloned version of your repo.
# A job is a set of steps
# By default, there's one job, and you give it the list of steps

# By default, all branches will get built.
# Adding a trigger configuration says "only build a master branch"

trigger:
- master

# A pool is a set of machines for running this job.
# This configuration says: "use Microsoft's hosted Ubuntu Linux virtual machines"
# We could have it connect to a machine we control to run the job on

pool:
  vmImage: 'ubuntu-latest'

# the steps in the job
# "script" is one kind of step on linux, it will run on bash
# On windows, it'll run in command prompt
# Give all steps a good display name

steps:
#- script: echo Hello, world!
#  displayName: Print hello world

#- script: |
#    echo "Showing current directory contents"
#    ls
#  displayName: Show directory contents

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud-dianalim'
    organization: '2002-feb24-net'
    scannerMode: 'MSBuild'
    projectKey: '2002-feb24-net_diana-project1'
    projectName: 'diana-project1'

- script: |
    cd LimsGarden
    cd LimsGarden.Web
    dotnet run
  displayName: 'Dotnet run'

- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

# ...
# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# This is a part of the publishing part, I think...
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(9be70b6d-212e-471b-99e3-3789a65e21cd)'
    appType: 'webApp'
    WebAppName: 'limsgarden-diana'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'limsgarden-diana'
